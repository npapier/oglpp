#summary GLE - Open(GL) (E)xtension library
#labels Phase-Implementation

= Introduction =

*gle*, a shortcut for Open(GL) (E)xtension library, provides all OpenGL extensions to C++ developers. 

= Features =

  * Core functions up to OpenGL version 3.x and 4.x and extensions from OpenGL [http://www.opengl.org/registry/ registry]

  * Documentation generated by doxygen grouping extensions by vendor, by name and by OpenGL version with link to official specification.

  * Display info about the current OpenGL renderer and extensions during initialization.

  * Cross-platform (GNU/Linux, MS/Windows and Apple/MacOSX).

  * Automatically generated from OpenGL header files (glext.h) and the [http://www.opengl.org/registry/ registry] website.

= Details =

gle detects, at run-time, whether OpenGL extensions are supported or not by the driver. gle initializes them and provides entry points to be able to use it easily.

= Usage =
{{{
#include <ostream>                       // for std::cout
#include <gle/gl.h>                      // for GL/gl.h, GL/glext.h, GL/wglext.h...
#include <gle/OpenGLExtensionsGen.hpp>   // for the class OpenGLExtensionsGen

// OpenGLExtensionGen is the main gle class containing all OpenGL entry points and isExtensionName() accessors.
gle::OpenGLExtensionsGen gleContext(std::cout);

// You must create a valid OpenGL context and make it current. So the initialization stage could be done by calling initialize().
gleContext.initialize();

// Now all entry points of OpenGLExtensionsGen are initialized according to the OpenGL context capabilities.
// You can use the OpenGLExtensionGen api to test extension availability and to call OpenGL API.
if ( gleContext.isGL_ARB_framebuffer_object )
{
  // Calls glGenFramebuffers()
  gleContext.glGenFramebuffers(...)
}

// A more convenient interface is available too

// Sets the OpenGLExtensionsGen object current to gle
gle::gleSetCurrent( gleContext );

// And you can rewrite the previous example
if ( isGL_ARB_framebuffer_object )
{
  // Calls glGenFramebuffers()
  glGenFramebuffers(...)
}

// Checks availability of GL_ARB_shader_objects
if ( isGL_ARB_shader_objects() )
{
  GLhandleARB programObject = glCreateProgramObjectARB();
  ...
}

}}}

= Doxygen documentation =

Online documentation generated by doxygen is available for [http://www.digital-trainers.com/doxygen/gle0-3/html gle 0.3]

= License ==

gle is distributed under [http://www.gnu.org/licenses/lgpl.html GNU LGPL] license, which can be found in files COPYING and COPYING.LESSER. This license allows you to use gle freely in commercial programs as long as you link with the dynamic library.